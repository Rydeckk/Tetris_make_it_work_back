// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                        String         @id @unique @default(uuid())
  name                      String
  email                     String         @unique
  password                  String
  userSkills                UsersSkills[]
  userBoards                UsersBoards[]
  userNotificationsReceived Notification[] @relation(name: "recipientNotifications")
  userNotificationsSend     Notification[] @relation(name: "senderNotifications")

  @@map("users")
}

model UsersSkills {
  user    Users  @relation(fields: [userId], references: [id])
  userId  String @map("user_id")
  skill   Skills @relation(fields: [skillId], references: [id])
  skillId String @map("skill_id")
  weight  Int    @default(0)

  @@id([userId, skillId])
  @@map("users_skills")
}

model Skills {
  id          String        @id @default(uuid())
  name        String
  userSkill   UsersSkills[]
  userSkillId String        @map("user_skill_id")
  skillsTasks SkillsTasks[]

  @@map("skills")
}

model UsersBoards {
  user          Users        @relation(fields: [userId], references: [id])
  userId        String       @map("user_id")
  boardTetris   BoardsTetris @relation(fields: [boardTetrisId], references: [id])
  boardTetrisId String       @map("board_tetris_id")

  @@id([userId, boardTetrisId])
  @@map("users_boards")
}

model BoardsTetris {
  id              String            @id @unique @default(uuid())
  name            String
  column          Int               @default(10)
  stepBoardTetris StepBoardTetris[]
  usersBoards     UsersBoards[]

  @@map("boards_tetris")
}

model StepBoardTetris {
  id            String       @id @unique @default(uuid())
  name          String
  boardTetris   BoardsTetris @relation(fields: [boardTetrisId], references: [id])
  boardTetrisId String       @map("board_tetris_id")
  tasks         Tasks[]
  row           Int          @default(5)
  order         Int

  @@map("step_board_tetris")
}

model Tasks {
  id                String          @id @unique @default(uuid())
  name              String
  company           String
  description       String
  stepBoardTetris   StepBoardTetris @relation(fields: [stepBoardTetrisId], references: [id])
  stepBoardTetrisId String          @map("step_board_tetris_id")
  skillsTasks       SkillsTasks[]
  updatedAt         DateTime        @updatedAt @map("updated_at")
  notifications     Notification[]

  @@map("tasks")
}

model SkillsTasks {
  skill   Skills @relation(fields: [skillId], references: [id])
  skillId String @map("skill_id")

  task   Tasks  @relation(fields: [taskId], references: [id])
  taskId String @map("task_id")

  @@id([skillId, taskId])
  @@map("skills_on_tasks")
}

model Notification {
  id          String @id @unique @default(uuid())
  isActive    Boolean @default(true)
  senderId    String @map("sender_id")
  sender      Users  @relation(name: "senderNotifications", fields: [senderId], references: [id])
  recipientId String @map("recipient_id")
  recipient   Users  @relation(name: "recipientNotifications", fields: [recipientId], references: [id])
  taskId      String @map("task_id")
  task        Tasks  @relation(fields: [taskId], references: [id])
}
